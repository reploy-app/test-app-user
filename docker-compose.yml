version: '3.8'

services:

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user_service
      - POSTGRES_PASSWORD=user_service_password
      - POSTGRES_DB=app_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_service"]
      interval: 2s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 2s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  elasticsearch:
    image: elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=elastic_password
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:elastic_password http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 2s
      timeout: 10s
      retries: 30
    restart: unless-stopped

  user_service_api:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./.env.example.docker
        target: /app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - LAUNCH_MODE=api
      - PORT=8081

  user_service_worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./.env.example.docker
        target: /app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - LAUNCH_MODE=worker
      - PORT=8082

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data: 